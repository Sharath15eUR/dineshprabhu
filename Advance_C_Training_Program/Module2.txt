Q1)
#include <stdio.h>
#include <pthread.h>
#include <unistd.h>
#include <stdbool.h>
#include <time.h>

int N;


bool is_prime(int num) {
    if (num <= 1) return false;
    for (int i = 2; i * i <= num; i++) {
        if (num % i == 0)
            return false;
    }
    return true;
}


void* sum_primes(void* arg) {
    int count = 0, num = 2, sum = 0;

    while (count < N) {
        if (is_prime(num)) {
            sum += num;
            count++;
        }
        num++;
    }

    printf("Sum of first %d prime numbers: %d\n", N, sum);
    return NULL;
}


void* thread1(void* arg) {
    time_t start = time(NULL);
    while (time(NULL) - start < 100) {
        printf("Thread 1 running\n");
        sleep(2);
    }
    return NULL;
}


void* thread2(void* arg) {
    time_t start = time(NULL);
    while (time(NULL) - start < 100) {
        printf("Thread 2 running\n");
        sleep(3);
    }
    return NULL;
}

int main() {
    pthread_t tA, tB, tC;

    printf("Enter value of N: ");
    scanf("%d", &N);

  
    pthread_create(&tA, NULL, sum_primes, NULL);
    pthread_create(&tB, NULL, thread1, NULL);
    pthread_create(&tC, NULL, thread2, NULL);


    pthread_join(tA, NULL);
    pthread_join(tB, NULL);
    pthread_join(tC, NULL);

    return 0;
}

Output:
Enter value of N: 3
Sum of first 3 prime numbers: 10
Thread 1 running
Thread 2 running
Thread 1 running
Thread 2 running
Thread 1 running
^C

...Program finished with exit code 2
Press ENTER to exit console.

Q2)
#include <stdio.h>
#include <sys/types.h>
#include <unistd.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>
#include <signal.h>

#define MAX_SECONDS 100

void signal_handler(int sig){
    printf("\n\nReceived interrupt %d..Please continue with execution\n\n",sig);
}

int is_prime(int number){
    if(number<=1) return 0;
    if(number==2) return 1;
    for(int j=2;(j*j)<=number;j++)
        if(number%j==0)
            return 0;
    return 1;
}

int* sum_of_n_prime(int n){
    int count=0,i=1;
    int* answer=(int *)calloc(1,sizeof(int));
    while(count<n){
        if(is_prime(i)){
            *answer+=i;
            count++;
        }
        i++;
    }
    return answer;
}

void thread2_func(){
    time_t start=time(NULL);
    while(time(NULL) - start <MAX_SECONDS){
        printf("Thread 1 is running\n");
        sleep(2);
    }
}

void thread3_func(){
    time_t start=time(NULL);
    while(time(NULL) - start <MAX_SECONDS){
        printf("Thread 2 is running\n");
        sleep(3);
    }
}

int main(){
    signal(SIGINT,signal_handler);
    signal(SIGTSTP,signal_handler);
    int n;
    int *result;
    printf("Enter the value of n : ");
    scanf("%d",&n);
    result=sum_of_n_prime(n);
    printf("Sum of first %d prime numbers is : %d\n",n,*result);
    
    thread2_func();
    thread3_func();
    free(result);
    return 0;
}

Ouput:
Enter the value of n : 3
Sum of first 3 prime numbers is : 10
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
^C

Received interrupt 2..Please continue with execution

Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 1 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running
Thread 2 is running


...Program finished with exit code 0
Press ENTER to exit console.

Q3)
1. Child Process - fork()

The fork() system call in Unix-like operating systems create a new process, known as the child process, which runs concurrently with the parent process.
The child process is an exact copy of the parent at the time of creation, sharing the same program counter, CPU registers, and open files.
To identify the parent and child process, we use the pid,
if pid is 0, it means that is the child process
if pid is a positive number >0, it means that is the parent process
if pid is a negative number <0, it means that the fork is failed and no child process is created
we use getpid() to get the current process id and getppid() to get the parent process id

Use cases of fork():
Used to run concurrent processes in unix or Linux systems
Used to run multiple subprocesses in case of more client requests in web browsers
Background processes can be run using fork() to make CPU performance higher

2. Handling Common Signals
Signals are software-generated interrupts sent to a process by the OS or another process. Some common signals include:
SIGINT (2): This signal is generated when a user presses Ctrl+C in the terminal to interrupt a running program
SIGTERM (15): Termination request from the system
SIGEGV (11): Segmentation fault (invalid memory access)
SIGKILL (9): Forceful termination (cannot be caught)
Processes can handle signals using custom signal handlers, allowing controlled responses instead of default termination.

3. Exploring Different Kernel Crashes
Kernel crashes occur due to hardware failures, memory corruption, or software bugs. Some common types include:
Null pointer dereference: Accessing invalid memory
Using memory after free()
Race condition where multiple kernel threads accessing the data incorrectly
Deadlocks: Improper synchronization leading to system hang
Stack overflow: Excessive recursion or memory allocation
Kernel Panic: A critical failure causing the system to halt. It is a fatal error and cannot be recovered so the system has to shutdown or reboot. Crash dumps (vmcore) help analyse the cause of kernel failures using tools like kdump and crash
Kernel Oops: It is a non-fatal and continue after crash

4. Time Complexity
Time Complexity measures the efficiency of an algorithm based on the input size. Common complexities include:
O(1): Constant time (e.g., accessing an array element)
O(log n): Logarithmic time (e.g., binary search)
O(n): Linear time (e.g., iterating through an array)
O(n^2): Quadratic time (e.g., nested loops)

5. Locking Mechanisms - Mutex vs Spinlock
At a time one thread should access a resource, no two threads can access it at the same time which is a race condition
Mutex: Imagine two threads trying to update a shared counter variable. Without mutual exclusion, one thread could start reading the counter, another thread could modify it in the middle of the first thread's read, and the first thread could finish its read with an outdated value, leading to incorrect results. Mutual exclusion (e.g., using a mutex) ensures that only one thread can access and modify the counter at any given time, preventing this issue. 
Mutual exclusion is a crucial synchronization technique in operating systems to prevent race conditions and maintain data integrity when multiple processes or threads share resources. It ensures that only one process or thread can access a shared resource at a time, preventing data corruption and other problems. mutex would put the thread to sleep while waiting. 
Spinlock: Imagine multiple threads accessing a shared resource like a printer. A spinlock can be used to ensure only one thread can access the printer at a time. When one thread is using the printer, it holds the spinlock. Other threads trying to access the printer will spin (busy wait) until the lock is released by the current thread. 
